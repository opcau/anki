{"tabs":[{"id":"1526510819702","name":"Alexa","icon":"fa-object-ungroup","linker":"alexa","index":0},{"name":"Tello","linker":"tello-jzg","id":"1527508856593","index":1},{"name":"AlexaExample","linker":"alexaexample","id":"1528097523708","index":2},{"name":"Map","linker":"map","id":"1529577575470","index":3},{"name":"ExitTest","linker":"exittest","id":"1529903879571","index":4}],"components":[{"id":"1527924431741","component":"trigger","tab":"1527508856593","name":"Trigger","x":378.8500061035156,"y":69,"connections":{"0":[{"index":"0","id":"1527924431809"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#F6BB42","notes":""},{"id":"1527924431809","component":"httprequest","tab":"1527508856593","name":"HTTP Request","x":596,"y":146,"connections":{"0":[{"index":"0","id":"1530242959392"}],"99":[{"index":"0","id":"1530242959392"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"url":"http://127.0.0.1:8801/rescue","stringify":"none","method":"POST","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n"},"color":"#5D9CEC","notes":""},{"id":"1527924435066","component":"oracleankievents","tab":"1527508856593","name":"Events","x":354,"y":173.0500030517578,"connections":{"0":[{"index":"0","id":"1527924431809"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Listening","color":"gray"},"options":{"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the oracle-anki server and processes events based on the given filters.</p>\n<p><strong>Filters</strong>:</p>\n<ul>\n<li>cars: Which cars to listen for events.</li>\n<li>events: Which events to listen to.</li>\n</ul>\n","AllCars":true,"OffTrack":true,"Skull":false},"color":"#FF4444","notes":"","cloning":false},{"id":"1527924969420","component":"alexaresponse","tab":"1526510819702","name":"Init Response","x":543,"y":93,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nReady to race.\n<audio src='https://s3.amazonaws.com/ask-soundlibrary/transportation/amzn_sfx_car_accelerate_01.mp3'/>\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527924972820","component":"oracleankilistcars","tab":"1526510819702","name":"Oracle/Anki List Cars","x":747,"y":111,"connections":{"0":[{"id":"1527924972885","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#FF6666","notes":"","cloning":false},{"id":"1527924972885","component":"template","tab":"1526510819702","name":"Template","x":975,"y":111,"connections":{"0":[{"id":"1527924972935","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"template":"<speak>\n    @{if model.data.carList.length === 0}\n      I don't see any cars right now.\n    @{else}\n      @{if model.data.carList.length === 1}\n        The only car I can see right now is @{model.data.carList[0].carName}\n      @{else}\n        The cars I can see right now are\n        @{foreach car in model.data.carList}\n          @{if index === model.data.carList.length-1}\n            and @{car.carName}\n          @{else}\n            @{if index === model.data.carList.length-2}\n              @{car.carName}\n            @{else}\n              @{car.carName},\n            @{fi}\n          @{fi}\n        @{end}\n      @{fi}\n    @{fi}\n</speak>","comreadme":"<h1 id=\"template\">Template</h1>\n<p>Template can create formatted string. It uses Total.js View engine. Data have to be JavaScript Object.</p>\n<ul>\n<li><strong>Response</strong> is always <code>String</code></li>\n</ul>\n"},"color":"#37BC9B","notes":""},{"id":"1527924972935","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1152,"y":108,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":false,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\n\n</speak>"},"color":"#5D9CEC","notes":""},{"id":"1527924976134","component":"function","tab":"1526510819702","name":"Function","x":690,"y":219,"connections":{"0":[{"id":"1527924976199","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\n\nif(flowdata.data.body.request.intent.slots.speedvalue !== undefined) {\n    flowdata.set('speed', flowdata.data.body.request.intent.slots.speedvalue.value);\n} else {\n    if(flowdata.data.body.request.intent.slots.changevalue.value !== undefined) {\n        switch(flowdata.data.body.request.intent.slots.changevalue.value) {\n            case \"faster\":\n                flowdata.set('speed',flowdata.data.body.session.attributes.speed + 100);\n                break;\n            case \"slower\":\n                flowdata.set('speed',flowdata.data.body.session.attributes.speed + 100);\n                break;\n        }\n    }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527924976199","component":"oracleankisetspeed","tab":"1526510819702","name":"Oracle/Anki Set Speed","x":828,"y":210,"connections":{"0":[{"id":"1527924976272","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Skull:500","color":"gray"},"options":{"speedupdates":false,"speed":500,"carname":"All","ccc":50},"color":"#FF2222","notes":"","cloning":false},{"id":"1527924976272","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1080,"y":207,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nOk.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527925002960","component":"function","tab":"1526510819702","name":"Function","x":708,"y":297,"connections":{"0":[{"id":"1527925003012","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nflowdata.set('speed', 0);\n\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527925003012","component":"oracleankisetspeed","tab":"1526510819702","name":"Oracle/Anki Set Speed","x":876,"y":294,"connections":{"0":[{"id":"1527925003071","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":500,"carname":"All","ccc":50},"color":"#FF2222","notes":"","cloning":false},{"id":"1527925003071","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1116,"y":285,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nStopped.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527925010040","component":"function","tab":"1526510819702","name":"Function","x":726,"y":489,"connections":{"0":[{"id":"1527925010100","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nif(flowdata.data.body.request.intent.slots.lightsmode.value !== undefined) {\n    if(flowdata.data.body.request.intent.slots.lightsmode.value === \"off\") {\n      flowdata.set('onoff', 'off');\n    } else {\n      flowdata.set('onoff','on');\n    }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527925010100","component":"oracleankisetlights","tab":"1526510819702","name":"Oracle/Anki Set Lights","x":909,"y":486,"connections":{"0":[{"id":"1527925010184","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lightname":"Tail Flash","onoff":true,"carname":"MXT","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>onoff e.g. On</li>\n<li>lightname e.g. Head Flash</li>\n</ul>\n"},"color":"#FD5134","notes":"","cloning":false},{"id":"1527925010184","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1167,"y":480,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nOk.  Taillights command done.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527925017798","component":"alexarouter","tab":"1526510819702","name":"Alexa Flow","x":336,"y":369,"connections":{"0":[{"index":"0","id":"1527924969420"}],"1":[{"index":"0","id":"1527924972820"}],"2":[{"index":"0","id":"1527924976134"}],"3":[{"index":"0","id":"1527925002960"}],"4":[{"index":"0","id":"1527932429189"}],"5":[{"index":"0","id":"1527925010040"}],"6":[{"index":"0","id":"1527932440592"}],"7":[{"index":"0","id":"1527925021171"}],"8":[{"index":"0","id":"1527932547652"}],"9":[{"index":"0","id":"1528001967219"}],"10":[{"index":"0","id":"1529567599440"}],"11":[{"index":"0","id":"1527932433315"}],"12":[{"index":"0","id":"1527932437019"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Session End Request Received.","color":"green"},"options":{"nointentsmml":"<speak>\n\n</speak>","stopintentsmml":"<speak>\n\n</speak>","cancelintentsmml":"<speak>\n\n</speak>","helpintentsmml":"<speak>\n    Help?  You need help?\n    <audio src='https://s3.amazonaws.com/ask-soundlibrary/human/amzn_sfx_crowd_applause_03.mp3'/>\n</speak>","conditions":[{"type":"IntentRequest","name":"ListCars","index":0},{"index":1,"name":"SetSpeed","type":"IntentRequest"},{"index":2,"name":"Stop","type":"IntentRequest"},{"index":3,"name":"Headlights","type":"IntentRequest"},{"index":4,"name":"Taillights","type":"IntentRequest"},{"type":"IntentRequest","name":"Lane","index":5},{"type":"IntentRequest","name":"UTurn","index":6},{"type":"IntentRequest","name":"ActiveCar","index":7},{"type":"IntentRequest","name":"EngineLight","index":8},{"type":"IntentRequest","name":"GetBattery","index":9}],"canceintentlindex":-1,"cancelintent":false,"cancelintentindex":1,"comreadme":"<h1 id=\"alexa-router\">Alexa router</h1>\n<p>This component takes mssages from a HTTP Route node and parses various Alexa intents.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n<p><strong>Outputs</strong>:</p>\n<ul>\n<li>LaunchRequest</li>\n<li>AMAZON.HelpIntent (Optional)</li>\n<li>AMAZON.CancelIntent (Optional)</li>\n<li>AMAZON.StopIntent (Optional)</li>\n<li>AMAZON.NoIntent (Optional)</li>\n<li>AMAZON.FallbackIntent (Optional)</li>\n<li>SessionEndedRequest</li>\n</ul>\n","fallbackintentindex":1,"helpintent":false,"helpintentindex":-1,"helpintentoverride":true,"nointentindex":-1,"sessionenddedindex":0,"stopintent":false,"stopintentindex":-1,"url":"/alexa/flow"},"color":"#CCCCFF","notes":"","output":["#FFFF00|Init","#FFFFFF|ListCars","#FFFFFF|SetSpeed","#FFFFFF|Stop","#FFFFFF|Headlights","#FFFFFF|Taillights","#FFFFFF|Lane","#FFFFFF|UTurn","#FFFFFF|ActiveCar","#FFFFFF|EngineLight","#FFFFFF|GetBattery","#444444|Fallback Intent","#FF4444|Session End"],"cloning":false},{"id":"1527925021171","component":"function","tab":"1526510819702","name":"Function","x":708,"y":681,"connections":{"0":[{"index":"0","id":"1527925021247"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527925021247","component":"oracleankiuturn","tab":"1526510819702","name":"Oracle/Anki U-Turn","x":900,"y":678,"connections":{"0":[{"index":"0","id":"1527925021347"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"carname":"All"},"color":"#FF2222","notes":"","cloning":false},{"id":"1527925021347","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1119,"y":672,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nU-Turn done.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932429189","component":"function","tab":"1526510819702","name":"Function","x":729,"y":384,"connections":{"0":[{"id":"1527932429262","index":"0"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nif(flowdata.data.body.request.intent.slots.lightsmode.value !== undefined) {\n    if(flowdata.data.body.request.intent.slots.lightsmode.value === \"off\") {\n      flowdata.set('onoff', 'off');\n    } else {\n      flowdata.set('onoff','on');\n    }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527932429262","component":"oracleankisetlights","tab":"1526510819702","name":"Oracle/Anki Set Lights","x":915,"y":387,"connections":{"0":[{"index":"0","id":"1527932429324"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lightname":"Head Flash","onoff":true,"carname":"MXT","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>onoff e.g. On</li>\n<li>lightname e.g. Head Flash</li>\n</ul>\n"},"color":"#FD5134","notes":"","cloning":false},{"id":"1527932429324","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1161,"y":381,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nOk.  Headlights command done.\n</speak>","property":"/","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932433315","component":"alexaresponse","tab":"1526510819702","name":"Catch All","x":597,"y":1002,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":true,"setresponse":true,"repromptsmml":"<speak>\nAre you still wanting to race?\n</speak>","responsesmml":"<speak>\nI don't understand.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932437019","component":"alexaresponse","tab":"1526510819702","name":"End Session","x":564,"y":1077,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":true,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nThanks for racing.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932440592","component":"function","tab":"1526510819702","name":"Function","x":723,"y":582,"connections":{"0":[{"index":"0","id":"1527932440669"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nif(flowdata.data.body.request.intent.slots.lanename.value !== undefined) {\n  flowdata.set('lane', flowdata.data.body.request.intent.slots.lanename.value);\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527932440669","component":"oracleankisetlane","tab":"1526510819702","name":"Oracle/Anki Set Lane","x":945,"y":579,"connections":{"0":[{"index":"0","id":"1527932440731"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Skull: left","color":"gray"},"options":{"lane":"Left","carname":"All"},"color":"#FF2222","notes":"","cloning":false},{"id":"1527932440731","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1179,"y":570,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nLane changed.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932536889","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1050,"y":756,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":false,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nLane changed.\n</speak>","property":"/","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932538843","component":"template","tab":"1526510819702","name":"Template","x":822,"y":768,"connections":{"0":[{"index":"0","id":"1527932536889"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"template":"<speak>\n    @{model.body.request.intent.slots.carname.value} is now the default car.\n</speak>","comreadme":"<h1 id=\"template\">Template</h1>\n<p>Template can create formatted string. It uses Total.js View engine. Data have to be JavaScript Object.</p>\n<ul>\n<li><strong>Response</strong> is always <code>String</code></li>\n</ul>\n"},"color":"#37BC9B","notes":""},{"id":"1527932547652","component":"function","tab":"1526510819702","name":"Function","x":672,"y":771,"connections":{"0":[{"index":"0","id":"1527932538843"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"if(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n      global.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n} else {\n    if(flowdata.data.body.session.attributes.carname !== undefined) {\n      global.set('carname', flowdata.data.body.session.attributes.carname);\n    }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1527932636452","component":"trigger","tab":"1527508856593","name":"Trigger","x":282,"y":330,"connections":{"0":[{"index":"0","id":"1527932636510"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#F6BB42","notes":""},{"id":"1527932636510","component":"httprequest","tab":"1527508856593","name":"Takeoff","x":459,"y":306,"connections":{"0":[{"index":"0","id":"1527932636569"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"url":"http://127.0.0.1:8801/takeoff","stringify":"none","method":"POST","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932636569","component":"delay","tab":"1527508856593","name":"Delay","x":663,"y":273,"connections":{"0":[{"index":"0","id":"1527932636619"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1527932636619","component":"httprequest","tab":"1527508856593","name":"CW90","x":834,"y":228,"connections":{"0":[{"index":"0","id":"1527932636670"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"url":"http://127.0.0.1:8801/cw/90","stringify":"none","method":"POST","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n"},"color":"#5D9CEC","notes":""},{"id":"1527932636670","component":"delay","tab":"1527508856593","name":"Delay","x":1014,"y":210,"connections":{"0":[{"index":"0","id":"1527932636723"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1527932636723","component":"httprequest","tab":"1527508856593","name":"CW90","x":1011,"y":111,"connections":{"0":[{"index":"0","id":"1527932636789"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n","method":"POST","stringify":"none","url":"http://127.0.0.1:8801/cw/90"},"color":"#5D9CEC","notes":""},{"id":"1527932636789","component":"delay","tab":"1527508856593","name":"Delay","x":1227,"y":81,"connections":{"0":[{"index":"0","id":"1527932636848"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1527932636848","component":"httprequest","tab":"1527508856593","name":"CW90","x":1233,"y":201,"connections":{"0":[{"index":"0","id":"1527932636899"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n","method":"POST","stringify":"none","url":"http://127.0.0.1:8801/cw/90"},"color":"#5D9CEC","notes":""},{"id":"1527932636899","component":"delay","tab":"1527508856593","name":"Delay","x":1407,"y":231,"connections":{"0":[{"index":"0","id":"1527932636950"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1527932636950","component":"httprequest","tab":"1527508856593","name":"CW90","x":1650,"y":255,"connections":{"0":[{"index":"0","id":"1527932637001"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n","method":"POST","stringify":"none","url":"http://127.0.0.1:8801/cw/90"},"color":"#5D9CEC","notes":""},{"id":"1527932637001","component":"delay","tab":"1527508856593","name":"Delay","x":1830,"y":321,"connections":{"0":[{"index":"0","id":"1527932637053"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1527932637053","component":"httprequest","tab":"1527508856593","name":"Land","x":1806,"y":423,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"url":"http://127.0.0.1:8801/land","stringify":"none","method":"POST","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n"},"color":"#5D9CEC","notes":""},{"id":"1528001967219","component":"function","tab":"1526510819702","name":"Function","x":663,"y":855,"connections":{"0":[{"index":"0","id":"1528001987787"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nif(flowdata.data.body.request.intent.slots.colorname.value !== undefined) {\n  flowdata.set('colour', flowdata.data.body.request.intent.slots.colorname.value);\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1528001967337","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1149,"y":849,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nColour set.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>Respond to Alexa Intent.</p>\n","property":"/"},"color":"#5D9CEC","notes":""},{"id":"1528001987787","component":"oracleankisetenginelight","tab":"1526510819702","name":"Oracle/Anki Set Engine Light","x":870,"y":855,"connections":{"0":[{"index":"0","id":"1528001967337"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"carname":"All"},"color":"#FF6666","notes":"","cloning":false},{"id":"1528093659323","component":"httproute","tab":"1526510819702","name":"HTTP Route","x":108,"y":429,"connections":{"0":[{"index":"0","id":"1527925017798"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Listening","color":"green"},"options":{"timeout":5,"cachepolicy":0,"cacheexpire":"5 minutes","size":5,"url":"/alexa/flow","method":"POST","comreadme":"<h1 id=\"http-route\">HTTP route</h1>\n<p><strong>Outputs</strong>:</p>\n<ul>\n<li>first output: raw data (cache is empty or is disabled)</li>\n<li>second output: cached data</li>\n</ul>\n<p>If one of the outputs is disabled then automatic responce with code &quot;503 service unavailable&quot; is sent.</p>\n<p>When a request comes in bellow object is available at <code>flowdata.data</code>:</p>\n<pre><code class=\"lang-javascript\">{\n    params: { id: &#39;1&#39; },     // params for dynamic routes, e.g. /test/{id}\n    query: { msg: &#39;Hello&#39; }, // parsed query string, e.g. /test/1?msg=Hello\n    body: { test: &#39;OK&#39; },    // object if json requests otherwise string\n    headers: {},             // headers data\n    session: {},             // session data\n    user: {},                // user data\n    files: [],               // uploaded files\n    url: &#39;/users/&#39;,          // a relative URL address\n    referrer: &#39;/&#39;,           // referrer\n    mobile: false,           // determines mobile device\n    robot: false,            // determines search robots/crawlsers\n    language: &#39;en&#39;           // determines language\n}\n</code></pre>\n<p>See <a target=\"_blank\"href=\"https://docs.totaljs.com/latest/en.html#api~HttpRouteOptionsFlags~unauthorize\">documentation for flags</a>. These method flags are set automatically e.g. <code>get, post, put or delete</code></p>\n<hr>\n<p><code>id:ROUTE_ID</code> flag cannot be used since it&#39;s already used by this component internally</p>\n","flags":["json","id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000,"id:1528093659323","post",5000]},"color":"#5D9CEC","notes":"### Configuration\n\n- __POST /alexa/flow__\n- flags: json\n- maximum request data length: __5 kB__\n- empty response: __undefined__\n- cache policy: __no cache__\n- cache expire: __5 minutes__","cloning":false},{"id":"1528097527475","component":"httproute","tab":"1528097523708","name":"HTTP Route","x":184.88333129882812,"y":163,"connections":{"0":[{"index":"0","id":"1528098254905"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Listening","color":"green"},"options":{"timeout":5,"cachepolicy":0,"cacheexpire":"5 minutes","size":5,"url":"/alexa/rating","method":"POST","comreadme":"<h1 id=\"http-route\">HTTP route</h1>\n<p><strong>Outputs</strong>:</p>\n<ul>\n<li>first output: raw data (cache is empty or is disabled)</li>\n<li>second output: cached data</li>\n</ul>\n<p>If one of the outputs is disabled then automatic responce with code &quot;503 service unavailable&quot; is sent.</p>\n<p>When a request comes in bellow object is available at <code>flowdata.data</code>:</p>\n<pre><code class=\"lang-javascript\">{\n    params: { id: &#39;1&#39; },     // params for dynamic routes, e.g. /test/{id}\n    query: { msg: &#39;Hello&#39; }, // parsed query string, e.g. /test/1?msg=Hello\n    body: { test: &#39;OK&#39; },    // object if json requests otherwise string\n    headers: {},             // headers data\n    session: {},             // session data\n    user: {},                // user data\n    files: [],               // uploaded files\n    url: &#39;/users/&#39;,          // a relative URL address\n    referrer: &#39;/&#39;,           // referrer\n    mobile: false,           // determines mobile device\n    robot: false,            // determines search robots/crawlsers\n    language: &#39;en&#39;           // determines language\n}\n</code></pre>\n<p>See <a target=\"_blank\"href=\"https://docs.totaljs.com/latest/en.html#api~HttpRouteOptionsFlags~unauthorize\">documentation for flags</a>. These method flags are set automatically e.g. <code>get, post, put or delete</code></p>\n<hr>\n<p><code>id:ROUTE_ID</code> flag cannot be used since it&#39;s already used by this component internally</p>\n"},"color":"#5D9CEC","notes":"### Configuration\n\n- __POST /alexa/rating__\n- flags: undefined\n- maximum request data length: __5 kB__\n- empty response: __undefined__\n- cache policy: __no cache__\n- cache expire: __5 minutes__","cloning":false},{"id":"1528098254905","component":"alexarouter","tab":"1528097523708","name":"Alexa Router","x":451.8833312988281,"y":143,"connections":{"0":[{"index":"0","id":"1528098310920"}],"1":[{"index":"0","id":"1528098497631"},{"index":"0","id":"1528098617238"}],"2":[{"index":"0","id":"1528098475863"}],"3":[{"index":"0","id":"1528098522482"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"nointentsmml":"<speak>\n\n</speak>","stopintentsmml":"<speak>\n\n</speak>","cancelintentsmml":"<speak>\n\n</speak>","helpintentsmml":"<speak>\nI don't want to help you.\n</speak>","conditions":[{"type":"IntentRequest","name":"RatingIntent","index":0}],"helpintentoverride":true,"comreadme":"<h1 id=\"alexa-router\">Alexa router</h1>\n<p>This component takes mssages from a HTTP Route node and parses various Alexa intents.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n<p><strong>Outputs</strong>:</p>\n<ul>\n<li>LaunchRequest</li>\n<li>AMAZON.HelpIntent (Optional)</li>\n<li>AMAZON.CancelIntent (Optional)</li>\n<li>AMAZON.StopIntent (Optional)</li>\n<li>AMAZON.NoIntent (Optional)</li>\n<li>AMAZON.FallbackIntent (Optional)</li>\n<li>SessionEndedRequest</li>\n</ul>\n"},"color":"#AAAAFF","notes":"","output":["#FFFF00|Init","#FFFFFF|RatingIntent","#444444|Fallback Intent","#FF4444|Session End"],"cloning":false},{"id":"1528098310920","component":"alexaresponse","tab":"1528097523708","name":"Init Response","x":669,"y":99,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nPlese provide a rating.\n<audio src='https://s3.amazonaws.com/ask-soundlibrary/transportation/amzn_sfx_car_accelerate_01.mp3'/>\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>This component builds a response message in smml format to be sent back to the Alexa after completing an intent.</p>\n<p>A path can be used to parse a message out of an existing message or a hard-coded value can be set.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n"},"color":"#5D9CEC","notes":""},{"id":"1528098475863","component":"alexaresponse","tab":"1528097523708","name":"Alexa Response","x":690,"y":270,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nI don't understand.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>This component builds a response message in smml format to be sent back to the Alexa after completing an intent.</p>\n<p>A path can be used to parse a message out of an existing message or a hard-coded value can be set.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n"},"color":"#5D9CEC","notes":""},{"id":"1528098497631","component":"alexaresponse","tab":"1528097523708","name":"Alexa Response","x":693,"y":192,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":true,"setresponse":true,"repromptsmml":"<speak>\nWould you like to do another rating?\n</speak>","responsesmml":"<speak>\nThank you for the rating.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>This component builds a response message in smml format to be sent back to the Alexa after completing an intent.</p>\n<p>A path can be used to parse a message out of an existing message or a hard-coded value can be set.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n"},"color":"#5D9CEC","notes":""},{"id":"1528098522482","component":"alexaresponse","tab":"1528097523708","name":"Alexa Response","x":684,"y":366,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":true,"reprompt":false,"setresponse":true,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nGoodbye.\n</speak>","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>This component builds a response message in smml format to be sent back to the Alexa after completing an intent.</p>\n<p>A path can be used to parse a message out of an existing message or a hard-coded value can be set.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n"},"color":"#5D9CEC","notes":""},{"id":"1528098617238","component":"debug","tab":"1528097523708","name":"Debug","x":883.8833312988281,"y":115,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"Enabled","color":"gray"},"options":{"type":"data","repository":false,"enabled":true},"color":"#967ADC","notes":""},{"id":"1529565668764","component":"oracleankigetbattery","tab":"1526510819702","name":"Oracle/Anki Get Battery","x":822,"y":960,"connections":{"0":[{"index":"0","id":"1529567686628"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component returns a car&#39;s battery level.</p>\n","carname":"Skull"},"color":"#FF6666","notes":"","cloning":false},{"id":"1529566285500","component":"alexaresponse","tab":"1526510819702","name":"Alexa Response","x":1188,"y":960,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"endsession":false,"reprompt":false,"setresponse":false,"repromptsmml":"<speak>\n\n</speak>","responsesmml":"<speak>\nOk.\n</speak>","property":"/","comreadme":"<h1 id=\"alexa-response\">Alexa response</h1>\n<p>This component builds a response message in smml format to be sent back to the Alexa after completing an intent.</p>\n<p>A path can be used to parse a message out of an existing message or a hard-coded value can be set.</p>\n<p>See demo here: <a target=\"_blank\"href=\"https://youtu.be/YBtN4Ky3MLo\">https://youtu.be/YBtN4Ky3MLo</a></p>\n"},"color":"#5D9CEC","notes":""},{"id":"1529567599440","component":"function","tab":"1526510819702","name":"Function","x":639,"y":927,"connections":{"0":[{"index":"0","id":"1529565668764"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"code":"flowdata.set(\"carname\",global.get('carname'));\nif(flowdata.data.body.request.intent.slots.carname.value !== undefined) {\n  // Handle synonyms \n  if(flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value !== undefined) {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n    global.set(\"carname\",flowdata.data.body.request.intent.slots.carname.resolutions.resolutionsPerAuthority[0].values[0].value.name);\n  } else {\n    flowdata.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n    global.set('carname', flowdata.data.body.request.intent.slots.carname.value);\n  }\n}\nsend();","outputs":1,"comreadme":"<h1 id=\"function\">Function</h1>\n<p>Allows you to do sync operation on data. If <code>send</code> function isn&#39;t called the data flow will not continue.</p>\n<p><strong>Custom function</strong>:</p>\n<pre><code class=\"lang-javascript\">data;          // received data\nsend;          // send data to next component, optionaly specify output index -&gt; send(0, data);\ninstance;      // ref to value.instance, available methods get, set, rem for storing temporary data related to this instance of Function component and  debug, status and error for sending data to designer\nglobal;        // ref to value.global, available methods get, set, rem for storing persistent data globally accessible in any component\nflowdata;      // ref to value.flowdata, instance of FlowData - available methods get, set, rem for storing temporary data related to current flow\nflowdata.data; // user defined data recieved from previous component\n\n// Example:\nsend(&#39;Hello world.&#39;); // sends data to all outputs\nsend(0, &#39;Hello world.&#39;); // sends data only to first output\n\n// Calling send without any argument will pass incomming data to next components\nsend();\n</code></pre>\n"},"color":"#656D78","notes":""},{"id":"1529567686628","component":"template","tab":"1526510819702","name":"Template","x":1038,"y":963,"connections":{"0":[{"index":"0","id":"1529566285500"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"template":"<speak>\n    @{if model.data.battery === undefined}\n      I wasn't able to find the battery level.\n    @{else}\n      @{global.carname} battery level is at @{model.data.battery} percent\n    @{fi}\n</speak>","comreadme":"<h1 id=\"template\">Template</h1>\n<p>Template can create formatted string. It uses Total.js View engine. Data have to be JavaScript Object.</p>\n<ul>\n<li><strong>Response</strong> is always <code>String</code></li>\n</ul>\n"},"color":"#37BC9B","notes":""},{"id":"1529577580446","component":"dashboardoutput","tab":"1529577575470","name":"MapOutput","x":990,"y":159,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"dashboard-output\">Dashboard Output</h1>\n<p>This component shows the content as it is in Total.js Dashboard.</p>\n"},"color":"#5CB36D","notes":""},{"id":"1529577603417","component":"template","tab":"1529577575470","name":"Template","x":777,"y":192,"connections":{"0":[{"index":"0","id":"1529577580446"},{"index":"0","id":"1529577911659"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"template":"<b>Map</b><br/>\n<img alt=\"Map\" src=\"@{model.data}\" />","comreadme":"<h1 id=\"template\">Template</h1>\n<p>Template can create formatted string. It uses Total.js View engine. Data have to be JavaScript Object.</p>\n<ul>\n<li><strong>Response</strong> is always <code>String</code></li>\n</ul>\n"},"color":"#37BC9B","notes":""},{"id":"1529577616221","component":"trigger","tab":"1529577575470","name":"Trigger","x":217.14285714285717,"y":207.14285714285717,"connections":{"0":[{"index":"0","id":"1529577797437"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#F6BB42","notes":""},{"id":"1529577797437","component":"httprequest","tab":"1529577575470","name":"HTTP Request","x":408,"y":315,"connections":{"0":[{"index":"0","id":"1529577603417"},{"index":"0","id":"1529577911659"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"stringify":"raw","method":"GET","url":"http://localhost:7801/getTrackMap/medium/true","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a request with received data.</p>\n<p><strong>Response:</strong></p>\n<pre><code class=\"lang-javascript\">{\n    data: String,\n    headers: Object,\n    status: Number,\n    host: String\n}\n</code></pre>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address or for custom headers/cookies/auth. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>url address e.g. <code>https://.../{key}/</code></li>\n<li>headers values e.g. <code>{token}</code></li>\n<li>cookies values e.g. <code>{token}</code></li>\n</ul>\n"},"color":"#5D9CEC","notes":""},{"id":"1529577911659","component":"debug","tab":"1529577575470","name":"Debug","x":1005,"y":375,"connections":{},"disabledio":{"input":[0],"output":[]},"state":{"text":"Disabled","color":"gray"},"options":{"type":"data","repository":false,"enabled":false},"color":"#967ADC","notes":""},{"id":"1529582469427","component":"dashboardanalytics","tab":"1529577575470","name":"Speed","x":750,"y":528,"connections":{"0":[{"index":"0","id":"1529577911659"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"872 mm/s","color":"gray"},"options":{"statsyears":1,"statsmonths":1,"statsdays":1,"statshours":24,"decimals":0,"format":"{0} mm/s","fn":"next(value.speed); ","comreadme":"<h1 id=\"dashboard-analytics\">Dashboard Analytics</h1>\n<p>Creates analytics automatically according a value. The value must be a number. The output is <code>Object</code>:</p>\n<pre><code class=\"lang-javascript\">{\n    count: 2,          // {Number} count of analyzed values in the hour\n    decimals: 0,       // {Number} count of decimals\n    format: &#39;{0} °C&#39;,  // {String} custom defined format, &quot;{0}&quot; will be a value\n    period: &#39;hourly&#39;   // {String} period &quot;hourly&quot; or &quot;daily&quot;\n    previous: 15,      // {Number} previous calculated value\n    raw: 32.3          // {Number} last raw value\n    type: &#39;max&#39;,       // {String} type of analytics\n    value: 32.3,       // {Number} last calculated value\n}\n</code></pre>\n<p>This components sends to Dashboard two types of data:</p>\n<ul>\n<li><code>laststate</code> with the last state</li>\n<li><code>stats</code> with stats</li>\n</ul>\n","type":"max"},"color":"#5CB36D","notes":""},{"id":"1529582524406","component":"oracleankievents","tab":"1529577575470","name":"Events","x":216,"y":534,"connections":{"0":[{"index":"0","id":"1529577911659"},{"index":"0","id":"1529582469427"},{"index":"0","id":"1529583074297"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"Event: Skull-speed","color":"gray"},"options":{"Speed":true,"Skull":true,"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the oracle-anki server and processes events based on the given filters.</p>\n<p><strong>Filters</strong>:</p>\n<ul>\n<li>cars: Which cars to listen for events.</li>\n<li>events: Which events to listen to.</li>\n</ul>\n"},"color":"#FF4444","notes":"","cloning":false},{"id":"1529582553090","component":"trigger","tab":"1529577575470","name":"Trigger","x":218.57142857142858,"y":638.5714285714286,"connections":{"0":[{"index":"0","id":"1529582558500"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#F6BB42","notes":""},{"id":"1529582558500","component":"oracleankisetspeed","tab":"1529577575470","name":"Skull:  Speed 500","x":525.7142857142858,"y":654.2857142857143,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":"500","carname":"Skull","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component calls the Oracle/Anki server and sets the speed of a given car.<br><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke;</li>\n<li>speed e.g. 600</li>\n</ul>\n","ccc":50},"color":"#FD5134","notes":"","cloning":false},{"id":"1529582951964","component":"oracleankisetspeed","tab":"1529577575470","name":"Skull:  Speed 0","x":585.7142857142858,"y":770,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":"0","carname":"Skull","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component calls the Oracle/Anki server and sets the speed of a given car.<br><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke;</li>\n<li>speed e.g. 600</li>\n</ul>\n","ccc":50},"color":"#FD5134","notes":"","cloning":false},{"id":"1529582959329","component":"trigger","tab":"1529577575470","name":"Trigger","x":310,"y":765.7142857142858,"connections":{"0":[{"index":"0","id":"1529582951964"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{},"color":"#F6BB42","notes":""},{"id":"1529583059209","component":"dashboardoutput","tab":"1529577575470","name":"SpeedRaw","x":981,"y":609,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"dashboard-output\">Dashboard Output</h1>\n<p>This component shows the content as it is in Total.js Dashboard.</p>\n"},"color":"#5CB36D","notes":""},{"id":"1529583074297","component":"template","tab":"1529577575470","name":"Template","x":786,"y":633,"connections":{"0":[{"index":"0","id":"1529583059209"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"template":"@{model.carname}: @{model.speed}","comreadme":"<h1 id=\"template\">Template</h1>\n<p>Template can create formatted string. It uses Total.js View engine. Data have to be JavaScript Object.</p>\n<ul>\n<li><strong>Response</strong> is always <code>String</code></li>\n</ul>\n"},"color":"#37BC9B","notes":""},{"id":"1529903884818","component":"oracleankievents","tab":"1529903879571","name":"Events","x":105,"y":594,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"Event: Skull-tracktransition","color":"gray"},"options":{"TrackTransition":true,"AllCars":true,"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the oracle-anki server and processes events based on the given filters.</p>\n<p><strong>Filters</strong>:</p>\n<ul>\n<li>cars: Which cars to listen for events.</li>\n<li>events: Which events to listen to.</li>\n</ul>\n"},"color":"#FF4444","notes":"","cloning":false},{"id":"1529903895445","component":"count","tab":"1529903879571","name":"Count","x":405,"y":681,"connections":{"0":[{"index":"0","id":"1529975351154"},{"index":"0","id":"1529975593565"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"initialvalue":0,"increment":1,"comreadme":"<h1 id=\"count\">Count</h1>\n<p>This component counts the number of messages received.</p>\n<p><strong>Response:</strong></p>\n<p>Integer value based on the initial value and increment settings.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li>Initial Value: What number should be output on the receipt of the first message.</li>\n<li>Increment: What should the increment be for each following message received.</li>\n</ul>\n"},"color":"#656D78","notes":""},{"id":"1529975212168","component":"trigger","tab":"1529903879571","name":"Start","x":161.88333129882812,"y":141,"connections":{"0":[{"index":"0","id":"1529975219279"},{"index":"1","id":"1529903895445"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"trigger\">Trigger</h1>\n<ul>\n<li>Clicking on the component starts the chain</li>\n<li>Settings allows to set a data-type and a value</li>\n</ul>\n"},"color":"#F6BB42","notes":""},{"id":"1529975219279","component":"oracleankisetspeed","tab":"1529903879571","name":"Ground Shock:  Speed 400","x":366,"y":108,"connections":{"0":[{"index":"0","id":"1529975243861"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":"400","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component calls the Oracle/Anki server and sets the speed of a given car.<br><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke;</li>\n<li>speed e.g. 600</li>\n</ul>\n","ccc":50},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975243861","component":"delay","tab":"1529903879571","name":"Delay","x":659.8833312988281,"y":94,"connections":{"0":[{"index":"0","id":"1529975249075"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":3000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1529975249075","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Left Lane","x":486,"y":216,"connections":{"0":[{"index":"0","id":"1529975267396"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Left","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975267396","component":"delay","tab":"1529903879571","name":"Delay","x":798,"y":165,"connections":{"0":[{"index":"0","id":"1529975267450"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":2000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1529975267450","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Right Lane","x":618,"y":279,"connections":{"0":[{"index":"0","id":"1529975289299"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Right","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975289299","component":"delay","tab":"1529903879571","name":"Delay","x":894,"y":255,"connections":{"0":[{"index":"0","id":"1529975289356"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":2000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1529975289356","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Left Lane","x":726,"y":378,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Left","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975305300","component":"trigger","tab":"1529903879571","name":"Stop","x":150,"y":42,"connections":{"0":[{"index":"0","id":"1529975311319"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"comreadme":"<h1 id=\"trigger\">Trigger</h1>\n<ul>\n<li>Clicking on the component starts the chain</li>\n<li>Settings allows to set a data-type and a value</li>\n</ul>\n"},"color":"#F6BB42","notes":""},{"id":"1529975311319","component":"oracleankisetspeed","tab":"1529903879571","name":"Ground Shock:  Speed 0","x":369,"y":21,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":"0","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component calls the Oracle/Anki server and sets the speed of a given car.<br><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke;</li>\n<li>speed e.g. 600</li>\n</ul>\n","ccc":50},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975351154","component":"switch","tab":"1529903879571","name":"Switch","x":603.8833312988281,"y":665,"connections":{"0":[{"index":"0","id":"1529976534951"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"conditions":[{"operator":"==","datatype":"Number","value":"10","index":0}],"property":"","comreadme":"<h1 id=\"switch\">Switch</h1>\n<ul>\n<li>set property of the data object to be used in condition<br>-</li>\n</ul>\n<h3 id=\"regex\">Regex</h3>\n<p>Uses &#39;test&#39; method e.g. if value is <code>/he/g</code> then it will be tested like this <code>/he/g.test(&lt;incoming data&gt;)</code> which returns true/false</p>\n"},"color":"#ffa824","notes":""},{"id":"1529975406152","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Right Lane","x":786,"y":660,"connections":{"0":[{"index":"0","id":"1529975664388"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Right","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975593565","component":"switch","tab":"1529903879571","name":"Switch","x":609,"y":795,"connections":{"0":[{"index":"0","id":"1529975608590"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"conditions":[{"operator":"==","datatype":"Number","value":"19","index":0}],"comreadme":"<h1 id=\"switch\">Switch</h1>\n<ul>\n<li>set property of the data object to be used in condition<br>-</li>\n</ul>\n<h3 id=\"regex\">Regex</h3>\n<p>Uses &#39;test&#39; method e.g. if value is <code>/he/g</code> then it will be tested like this <code>/he/g.test(&lt;incoming data&gt;)</code> which returns true/false</p>\n","property":""},"color":"#ffa824","notes":""},{"id":"1529975608590","component":"oracleankisetspeed","tab":"1529903879571","name":"Ground Shock:  Speed 0","x":786,"y":774,"connections":{"0":[{"index":"0","id":"1529975937134"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"speedupdates":false,"speed":"0","carname":"Ground Shock","ccc":50,"comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component calls the Oracle/Anki server and sets the speed of a given car.<br><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke;</li>\n<li>speed e.g. 600</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975664388","component":"delay","tab":"1529903879571","name":"Delay","x":1086,"y":657,"connections":{"0":[{"index":"0","id":"1529975668404"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":3000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1529975668404","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Right Lane","x":1236,"y":648,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Right","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529975937134","component":"delay","tab":"1529903879571","name":"Delay","x":1089,"y":780,"connections":{"0":[{"index":"1","id":"1529903895445"},{"index":"0","id":"1529975219279"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":5000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1529976534951","component":"oracleankisetlane","tab":"1529903879571","name":"Ground Shock: Right Middle Lane","x":792,"y":576,"connections":{"0":[{"index":"0","id":"1529976544197"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"lane":"Right Middle","carname":"Ground Shock","comreadme":"<h1 id=\"request\">Request</h1>\n<p>This component creates a websocket to the given URI and outputs data received.</p>\n<p><strong>Dynamic arguments</strong>:<br>Are performed via FlowData repository and can be used for URL address. Use <code>repository</code> component for creating of dynamic arguments. Dynamic values are replaced in the form <code>{key}</code>:</p>\n<ul>\n<li>carname e.g. Nuke</li>\n<li>lane e.g. Left</li>\n<li>lanevalue e.g. -64</li>\n</ul>\n"},"color":"#1C2D7C","notes":"","cloning":false},{"id":"1529976544197","component":"delay","tab":"1529903879571","name":"Delay","x":1092,"y":564,"connections":{"0":[{"index":"0","id":"1529975406152"}]},"disabledio":{"input":[],"output":[]},"state":{"text":"","color":"gray"},"options":{"delay":1000,"comreadme":"<h1 id=\"delay\">Delay</h1>\n<p>This component creates a delay between receiving and sending data.</p>\n"},"color":"#656D78","notes":""},{"id":"1530242959392","component":"debug","tab":"1527508856593","name":"Debug","x":838.3500061035156,"y":96,"connections":{},"disabledio":{"input":[],"output":[]},"state":{"text":"Enabled","color":"gray"},"options":{"type":"data","repository":false,"enabled":true},"color":"#967ADC","notes":""}],"version":510,"variables":""}